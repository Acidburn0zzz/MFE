  load mlist.maude

  fth TAOSET is
    protecting TRUTH-VALUE .
    including MTRIV .
    op _<_ : Elt Elt -> Bool .
    vars X Y Z : Elt .
    ceq X < Z = true if X < Y /\ Y < Z [nonexec label transitive] .
    ceq X = Y if X < Y /\ Y < X [nonexec label antisymmetric] .
  endfth

  fth SPOSET is
    including TAOSET .
    var X : Elt .
    eq X < X = false [nonexec label irreflexive] .
  endfth

  fth POSET is
    including SPOSET .
    op _<=_ : Elt Elt -> Bool .
    vars X Y : Elt .
    eq X <= X = true [nonexec] .
    ceq X <= Y = true if X < Y [nonexec] .
    ceq X = Y if X <= Y /\ X < Y = false [nonexec] .
  endfth

  fth TOSET is
    including POSET .
    vars X Y : Elt .
    ceq X <= Y = true if Y <= X = false [nonexec label total] .
  endfth

  view TOSET from MTRIV to TOSET is
  endv
  
  fmod EXT-MLIST{X :: TOSET} is
    protecting MLIST{TOSET}{X} .

    vars N M : X$Elt .
    vars L L' : List{TOSET}{X} .

    op insertion-sort : List{TOSET}{X} -> List{TOSET}{X} .
    op insert-list : List{TOSET}{X} X$Elt -> List{TOSET}{X} .
   
    eq insertion-sort(nil) = nil .
    eq insertion-sort(N L) = insert-list(insertion-sort(L), N) .

    eq insert-list(nil, M) = M .
    ceq insert-list(N L, M) = M N L if M <= N .
    ceq insert-list(N L, M) = N insert-list(L, M) if N < M .

    op mergesort : List{TOSET}{X} -> List{TOSET}{X} .
    op merge : List{TOSET}{X} List{TOSET}{X} -> List{TOSET}{X} [comm] .

    eq mergesort(nil) = nil .
    eq mergesort(N) = N .
    ceq mergesort(L) 
      = merge(mergesort(take quot(size(L), 2) from L),
              mergesort(throw quot(size(L), 2) from L))
      if 1 < size(L) .

    eq merge(L, nil) = L .
    ceq merge(N L, M L') = N merge(L, M L') if N <= M .

    op quicksort : List{TOSET}{X} -> List{TOSET}{X} .
    op leq-elems : List{TOSET}{X} X$Elt -> List{TOSET}{X} .
    op gr-elems : List{TOSET}{X} X$Elt -> List{TOSET}{X} .

    eq quicksort(nil) = nil .
    eq quicksort(N L) 
      = quicksort(leq-elems(L, N)) (N quicksort(gr-elems(L, N))) .

    eq leq-elems(nil, M) = nil .
    ceq leq-elems(N L, M) = N leq-elems(L, M) if N <= M .
    ceq leq-elems(N L, M) = leq-elems(L, M) if M < N .
    eq gr-elems(nil, M) = nil .
    ceq gr-elems(N L, M) = gr-elems(L, M) if N <= M .
    ceq gr-elems(N L, M) = N gr-elems(L, M) if M < N .
  endfm

  view NatAsToset from TOSET to MNAT is
    sort Elt to Nat .
  endv

  fmod MNAT-EXT-MLIST is
    protecting EXT-MLIST{NatAsToset} .
  endfm

  red insertion-sort(5  4  3  2  1  0) .
  red mergesort(5  3  1  0  2  4) .
  red quicksort(0  1  2  5  4  3) .
