MTT -> AProVE: 
( VAR A B X@@@ )  ( THEORY   ( AC @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ )   ( AC @underscore@or@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ )  )   ( RULES   @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( false ,  A ) -> false   @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( true ,  A ) -> A   @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@-@osb@Bool@csb@ ( false ,  A ,  X@@@ ) -> @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( false ,  X@@@ )   @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@-@osb@Bool@csb@ ( true ,  A ,  X@@@ ) -> @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,  X@@@ )   @underscore@or@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,  B ) -> not@underscore@-@osb@Bool@csb@ ( @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( not@underscore@-@osb@Bool@csb@ ( A ) ,  not@underscore@-@osb@Bool@csb@ ( B ) ) )   @underscore@or@underscore@-@osb@Bool@csb@-@osb@Bool@csb@-@osb@Bool@csb@ ( A ,  B ,  X@@@ ) -> @underscore@or@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( X@@@ ,  not@underscore@-@osb@Bool@csb@ ( @underscore@and@underscore@-@osb@Bool@csb@-@osb@Bool@csb@ ( not@underscore@-@osb@Bool@csb@ ( A ) ,  not@underscore@-@osb@Bool@csb@ ( B ) ) ) )   not@underscore@-@osb@Bool@csb@ ( false ) -> true   not@underscore@-@osb@Bool@csb@ ( true ) -> false   not@underscore@-@osb@Bool@csb@ ( not@underscore@-@osb@Bool@csb@ ( A ) ) -> A  )  

AProVE -> MTT: 
YES
Term Rewriting System R:

   [A, X@@@, B]
   AC [_and_-`[Bool`]-`[Bool`], _or_-`[Bool`]-`[Bool`]]
   _and_-`[Bool`]-`[Bool`](false, A) -> false
   _and_-`[Bool`]-`[Bool`](true, A) -> A
   _and_-`[Bool`]-`[Bool`]-`[Bool`](false, A, X@@@) -> _and_-`[Bool`]-`[Bool`](false, X@@@)
   _and_-`[Bool`]-`[Bool`]-`[Bool`](true, A, X@@@) -> _and_-`[Bool`]-`[Bool`](A, X@@@)
   _or_-`[Bool`]-`[Bool`](A, B) -> not_-`[Bool`](_and_-`[Bool`]-`[Bool`](not_-`[Bool`](A), not_-`[Bool`](B)))
   _or_-`[Bool`]-`[Bool`]-`[Bool`](A, B, X@@@) -> _or_-`[Bool`]-`[Bool`](X@@@, not_-`[Bool`](_and_-`[Bool`]-`[Bool`](not_-`[Bool`](A), not_-`[Bool`](B))))
   not_-`[Bool`](false) -> true
   not_-`[Bool`](true) -> false
   not_-`[Bool`](not_-`[Bool`](A)) -> A

Termination of R to be shown.





   R     ->Direct Termination



Direct Termination proof successful with the following AC-Compatible Recursive Path Order with Status:

Precedence:
_and_-`[Bool`]-`[Bool`]-`[Bool`] > _and_-`[Bool`]-`[Bool`]
_or_-`[Bool`]-`[Bool`]-`[Bool`] > _or_-`[Bool`]-`[Bool`] > _and_-`[Bool`]-`[Bool`]
_or_-`[Bool`]-`[Bool`]-`[Bool`] > _or_-`[Bool`]-`[Bool`] > not_-`[Bool`] > false
_or_-`[Bool`]-`[Bool`]-`[Bool`] > _or_-`[Bool`]-`[Bool`] > not_-`[Bool`] > true


Status:
_and_-`[Bool`]-`[Bool`]: flat status
false: no status
true: no status
_and_-`[Bool`]-`[Bool`]-`[Bool`]: no status
_or_-`[Bool`]-`[Bool`]: flat status
not_-`[Bool`]: no status
_or_-`[Bool`]-`[Bool`]-`[Bool`]: no status

Removing all rules.


   R     ->Direct

       ->TRS2
         ->Dependency Pair Analysis



R contains no Dependency Pairs  and therefore no SCCs.


Termination of R successfully shown.

Duration: 
0:00 minutes



