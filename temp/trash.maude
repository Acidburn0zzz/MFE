set trace on .
set trace select on .
trace select ----crcCritPairs
             ----prepNarrowingSols
             metaNarrowSearch
             .
set print conceal off .

***(
red crcCritPairs(fmod 'INT is
    nil
    sorts 'Bool ; 'Int ; 'Nat ; 'NzInt ; 'NzNat ; 'Zero .
    subsort 'Nat < 'Int .
    subsort 'NzInt < 'Int .
    subsort 'NzNat < 'Nat .
    subsort 'NzNat < 'NzInt .
    subsort 'Zero < 'Nat .
    op '-_ : 'Int -> 'Int [none] .
    op '-_ : 'NzInt -> 'NzInt [none] .
    op '-_ : 'NzNat -> 'NzInt [ctor] .
    op '0 : nil -> 'Zero [ctor] .
    op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31)] .
    op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31)] .
    op '_+_ : 'Int 'Int -> 'Int [assoc comm prec(33)] .
    op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33)] .
    op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33)] .
    op '_-_ : 'Int 'Int -> 'Int [prec(33) gather('E 'e)] .
    op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37)] .
    op '_<_ : 'Nat 'Nat -> 'Bool [prec(37)] .
    op '_==_ : 'Nat 'Nat -> 'Bool [comm prec(51)] .
    op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37)] .
    op '_>_ : 'Nat 'Nat -> 'Bool [prec(37)] .
    op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e)] .
    op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e)] .
    op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
    op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51)] .
    op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
    op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
    op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e)] .
    op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e)] .
    op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
    op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
    op 'if_then_else_fi : 'Bool 'Nat 'Nat -> 'Nat [none] .
    op 'modExp : '`[Nat`] '`[Nat`] '`[NzNat`] -> '`[Nat`] [none] .
    op 'not_ : 'Bool -> 'Bool [prec(53)] .
    op 'p_ : 'Int -> 'Int [ctor] .
    op 'p_ : 'Zero -> 'NzInt [ctor] .
    op 's_ : 'Nat -> 'NzNat [ctor] .
    op 'sd : 'Nat 'Nat -> 'Nat [comm] .
    op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
    none
    eq '-_['0.Zero] = '0.Zero [label('48)] .
***(
    eq '-_['-_['I:Int]] = 'I:Int [label('40)] .
    eq '-_['p_['0.Zero]] = 's_['0.Zero] [label('41)] .
    eq '-_['s_['0.Zero]] = 'p_['0.Zero] [label('42)] .
    eq '_*_['0.Zero,'N:Nat] = '0.Zero [label('08)] .
    eq '_*_['N:Nat,'_+_['M:Nat,'N':Nat]] = '_+_['_*_['N:Nat,'M:Nat],'_*_['N:Nat,'N':Nat]] [label('15)] .
    eq '_*_['N:Nat,'s_['M:Nat]] = '_+_['N:Nat,'_*_['N:Nat,'M:Nat]] [label('09)] .
    eq '_*_['0.Zero,'N:Nat,'X@@@:`[Int`]] = '_*_['0.Zero,'X@@@:`[Int`]] [label('08)] .
    eq '_*_['N:Nat,'X@@@:`[Int`],'_+_['M:Nat,'N':Nat]] = '_*_['X@@@:`[Int`],'_+_['_*_['N:Nat,'M:Nat],'_*_['N:Nat,
    'N':Nat]]] [label('15)] .
    eq '_*_['N:Nat,'X@@@:`[Int`],'s_['M:Nat]] = '_*_['X@@@:`[Int`],'_+_['N:Nat,'_*_['N:Nat,'M:Nat]]] [label('09)] .
    eq '_+_['0.Zero,'I:Int] = 'I:Int [label('43)] .
    eq '_+_['M:Nat,'s_['N:Nat]] = 's_['_+_['N:Nat,'M:Nat]] [label('05)] .
    eq '_+_['p_['I:Int],'s_['N:Nat]] = '_+_['I:Int,'N:Nat] [label('46)] .
    eq '_+_['0.Zero,'I:Int,'X@@@:`[Int`]] = '_+_['I:Int,'X@@@:`[Int`]] [label('43)] .
    eq '_+_['M:Nat,'X@@@:`[Int`],'s_['N:Nat]] = '_+_['X@@@:`[Int`],'s_['_+_['N:Nat,'M:Nat]]] [label('05)] .
    eq '_+_['X@@@:`[Int`],'p_['I:Int],'s_['N:Nat]] = '_+_['I:Int,'N:Nat,'X@@@:`[Int`]] [label('46)] .
    eq '_-_['0.Zero,'I:Int] = '-_['I:Int] [label('49)] .
    eq '_-_['I:Int,'0.Zero] = 'I:Int [label('47)] .
    eq '_-_['s_['N:Nat],'s_['N':Nat]] = '_-_['N:Nat,'N':Nat] [label('50)] .
    eq '_<=_['N:Nat,'M:Nat] = 'not_['_>_['N:Nat,'M:Nat]] [label('31)] .
    eq '_<_['N:Nat,'M:Nat] = 'not_['_>=_['N:Nat,'M:Nat]] [label('30)] .
    eq '_==_['0.Zero,'0.Zero] = 'true.Bool [label('01)] .
    eq '_==_['0.Zero,'s_['N:Nat]] = 'false.Bool [label('02)] .
    eq '_==_['s_['N:Nat],'s_['M:Nat]] = '_==_['N:Nat,'M:Nat] [label('03)] .
    eq '_>=_['N:Nat,'M:Nat] = '_or_['_==_['N:Nat,'M:Nat],'_>_['N:Nat,'M:Nat]] [none] .
    eq '_>_['0.Zero,'N:Nat] = 'false.Bool [none] .
    eq '_>_['s_['N:Nat],'0.Zero] = 'true.Bool [none] .
    eq '_>_['s_['N:Nat],'s_['M:Nat]] = '_>_['N:Nat,'M:Nat] [none] .
    eq '_^_['0.Zero,'N:Nat] = '0.Zero [label('17)] .
    eq '_^_['N:Nat,'s_['M:Nat]] = '_*_['N:Nat,'_^_['N:Nat,'M:Nat]] [label('18)] .
    eq '_^_['s_['N:Nat],'0.Zero] = 's_['0.Zero] [label('16)] .
    eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
    eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_['A:Bool,'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
    eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
    eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
    eq '_and_['A:Bool,'A:Bool,'X@@@:`[Bool`]] = '_and_['A:Bool,'X@@@:`[Bool`]] [none] .
    eq '_and_['A:Bool,'X@@@:`[Bool`],'_xor_['B:Bool,'C:Bool]] = '_and_['X@@@:`[Bool`],'_xor_['_and_['A:Bool,'B:Bool],
    '_and_['A:Bool,'C:Bool]]] [none] .
    eq '_and_['false.Bool,'A:Bool,'X@@@:`[Bool`]] = '_and_['false.Bool,'X@@@:`[Bool`]] [none] .
    eq '_and_['true.Bool,'A:Bool,'X@@@:`[Bool`]] = '_and_['A:Bool,'X@@@:`[Bool`]] [none] .
    eq '_divides_['Nz:NzNat,'N:Nat] = '_==_['0.Zero,'_rem_['N:Nat,'Nz:NzNat]] [label('33)] .
    eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_['A:Bool,'B:Bool]]] [none] .
    eq '_or_['A:Bool,'B:Bool] = '_xor_['A:Bool,'B:Bool,'_and_['A:Bool,'B:Bool]] [none] .
    eq '_or_['A:Bool,'B:Bool,'X@@@:`[Bool`]] = '_or_['X@@@:`[Bool`],'_xor_['A:Bool,'B:Bool,'_and_['A:Bool,'B:Bool]]]
    [none] .
    eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
    eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
    eq '_xor_['A:Bool,'A:Bool,'X@@@:`[Bool`]] = '_xor_['false.Bool,'X@@@:`[Bool`]] [none] .
    eq '_xor_['false.Bool,'A:Bool,'X@@@:`[Bool`]] = '_xor_['A:Bool,'X@@@:`[Bool`]] [none] .
    eq 'modExp['N:Nat,'M:Nat,'P:Nat] = '_rem_['_^_['N:Nat,'M:Nat],'P:Nat] [label('19)] .
    eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
    eq 'p_['s_['I:Int]] = 'I:Int [label('44)] .
    eq 's_['p_['I:Int]] = 'I:Int [label('45)] .
    eq 'sd['0.Zero,'N:Nat] = 'N:Nat [label('06)] .
    eq 'sd['s_['N:Nat],'s_['M:Nat]] = 'sd['N:Nat,'M:Nat] [label('07)] .
    ceq '_quo_['N:Nat,'Nz:NzNat] = '0.Zero if 'not_['_>=_['N:Nat,'Nz:NzNat]] = 'true.Bool [label('12)] .
    ceq '_quo_['N:Nat,'Nz:NzNat] = '_+_['s_['0.Zero],'_quo_['sd['N:Nat,'Nz:NzNat],'Nz:NzNat]] if '_>=_['N:Nat,
    'Nz:NzNat] = 'true.Bool [label('11)] .
    ceq '_rem_['N:Nat,'Nz:NzNat] = 'N:Nat if 'not_['_>=_['N:Nat,'Nz:NzNat]] = 'true.Bool [label('14)] .
    ceq '_rem_['N:Nat,'Nz:NzNat] = '_rem_['sd['N:Nat,'Nz:NzNat],'Nz:NzNat] if '_>=_['N:Nat,'Nz:NzNat] = 'true.Bool [
    label('13)] .
    ceq 'if_then_else_fi['B:Bool,'N:Nat,'M:Nat] = 'M:Nat if 'not_['B:Bool] = 'true.Bool [none] .
    ceq 'if_then_else_fi['B:Bool,'N:Nat,'M:Nat] = 'N:Nat if 'B:Bool = 'true.Bool [none] .
***)
  endfm) .
***)  
  
  
red metaNarrowSearch*(mod 'INT is
  nil
  sorts '#Condition ; '#ConditionList ; 'Bool ; 'Int ; 'Nat ; 'NzInt ; 'NzNat ; 'Zero .
  subsort 'Nat < 'Int .
  subsort 'NzInt < 'Int .
  subsort 'NzNat < 'Nat .
  subsort 'NzNat < 'NzInt .
  subsort 'Zero < 'Nat .
  op '#_#_# : 'Int '#ConditionList -> 'Int [none] .
  op '#_#_#_# : 'Int 'Zero '#ConditionList -> 'Int [frozen(2 3)] .
  op '-_ : 'Int -> 'Int [none] .
  op '-_ : 'NzInt -> 'NzInt [none] .
  op '-_ : 'NzNat -> 'NzInt [ctor] .
  op '0 : nil -> 'Zero [ctor] .
  op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31)] .
  op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31)] .
  op '_+_ : 'Int 'Int -> 'Int [assoc comm prec(33)] .
  op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33)] .
  op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33)] .
  op '_-_ : 'Int 'Int -> 'Int [prec(33) gather('E 'e)] .
  op '_/\_ : '#Condition '#ConditionList -> '#ConditionList [none] .
  op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37)] .
  op '_<_ : 'Nat 'Nat -> 'Bool [prec(37)] .
  op '_==_ : 'Nat 'Nat -> 'Bool [comm prec(51)] .
  op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37)] .
  op '_>_ : 'Nat 'Nat -> 'Bool [prec(37)] .
  op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e)] .
  op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e)] .
  op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
  op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51)] .
  op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
  op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
  op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e)] .
  op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e)] .
  op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
  op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
  op 'if_then_else_fi : 'Bool 'Nat 'Nat -> 'Nat [none] .
  op 'modExp : '`[Nat`] '`[Nat`] '`[NzNat`] -> '`[Nat`] [none] .
  op 'nil : nil -> '#ConditionList [none] .
  op 'not_ : 'Bool -> 'Bool [prec(53)] .
  op 'p_ : 'Int -> 'Int [ctor] .
  op 'p_ : 'Zero -> 'NzInt [ctor] .
  op 's_ : 'Nat -> 'NzNat [ctor] .
  op 'sd : 'Nat 'Nat -> 'Nat [comm] .
  op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
  none
  none
  rl '-_['0.Zero] => '#_#_#['0.Zero,'nil.#ConditionList] [none] .
endm, '#_#_#_#['-_['0.Zero],'0.Zero,'nil.#ConditionList], '#V:`[Int`], none, '+, 1, unbounded, unbounded) .
  