set print conceal off . 
set trace off .
set trace select on .
trace select getCPCond 
             .
red
crcContextJoinableAndUnfeasibleCPs(fmod 'EXPRESSION is
  nil
  sorts 'Arg ; 'Bool ; 'Expr ; 'Subst ; 'Value ; 'Var .
  subsort 'Value < 'Arg .
  subsort 'Var < 'Arg .
  op '0 : nil -> 'Expr [none] .
  op '1 : nil -> 'Expr [none] .
  op 'apply : 'Subst 'Expr -> 'Expr [none] .
  op 'f : 'Arg -> 'Expr [none] .
  op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
  op 'not_ : 'Bool -> 'Bool [none] .
  op 'pred? : 'Arg -> 'Bool [none] .
  op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
  none
  ceq 'apply['S:Subst,'f['A:Arg]] = '1.Expr if 'not_['pred?['A:Arg]] =
    'true.Bool [label('eq2)] .
  ceq 'f['A:Arg] = '0.Expr if 'pred?['A:Arg] = 'true.Bool [label('eq1)] .
endfm, 
ccp("EXPRESSION1", 'eq1, 'eq2, 'apply['S:Subst,'0.Expr], '1.Expr, 'not_['pred?[
    'A:Arg]] = 'true.Bool /\ 'pred?['A:Arg] = 'true.Bool, pending) 
)
.